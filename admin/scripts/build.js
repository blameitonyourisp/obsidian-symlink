// Copyright (c) 2023 James Reid. All rights reserved.
//
// This source code file is licensed under the terms of the MIT license, a copy
// of which may be found in the LICENSE.md file in the root of this repository.
//
// For a template copy of the license see one of the following 3rd party sites:
//      - <https://opensource.org/licenses/MIT>
//      - <https://choosealicense.com/licenses/mit>
//      - <https://spdx.org/licenses/MIT>

/**
 * @ignore
 * @file Build config.
 * @author James Reid
 */

// @ts-check

// @@imports-node
import fs from "fs"

// @@imports-dependencies
import builtins from "builtin-modules"
import esbuild from "esbuild"

// @@body
// Declare banner to be displayed at the top of generated builds.
const banner =
`/*
This plugin file is generated by esbuild. To view the source, please visit the 
github repository of this plugin.
*/
`

// Determine if build is in production or not based on environment variables set
// by npm for different script names.
const isProd = process.env.npm_lifecycle_event?.split(":")[1] === "prod"

// Custom esbuild plugin to copy additional required files for a functioning
// obsidian plugin to the appropriate output directory. The build.onEnd event
// callback will be called at the end of any build, i.e. will be triggered
// in both rebuild and watch modes.
const copyCustomFilesPlugin = {
    name: "copy-custom-files",
    setup(/** @type {esbuild.PluginBuild} */ build) {
        build.onEnd(() => {
            // Determine destination directory based on if in production.
            const dirname = isProd ? "dist/plugin" : "build/plugin"

            // Ensure destination directory exists.
            if (!fs.existsSync(dirname)) {
                fs.mkdirSync(dirname, { recursive: true })
            }

            // Copy style and manifest files required for obsidian plugin to the
            // appropriate directory. Note that the files are copied from
            // specific locations in the codebase; obviously if these files are
            // moved, the following paths will need to be updated.
            fs.copyFileSync("src/styles/styles.css", `${dirname}/styles.css`)
            fs.copyFileSync("manifest.json", `${dirname}/manifest.json`)
        })
    }
}

// Create esbuild context with appropriate configuration, largely left unchanged
// from the configuration used in the obsidian sample plugin.
const context = await esbuild.context({
    banner: { js: banner },
    bundle: true,
    entryPoints: ["src/main.ts"],
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins
    ],
    format: "cjs",
    lineLimit: 80,
    logLevel: "info",
    outfile: isProd ? "dist/plugin/main.js" : "build/plugin/main.js",
    plugins: [
        copyCustomFilesPlugin
    ],
    sourcemap: isProd ? false : "inline",
    target: "es2018",
    treeShaking: true
})

// Rebuild plugin in production mode, or watch src files and build plugin after
// changes in development mode.
if (isProd) {
    await context.rebuild()
    process.exit(0)
}
else {
    await context.watch()
}

// @@no-exports
